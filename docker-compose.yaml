services:
  writedb:
    image: postgres:latest
    container_name: writedb
    restart: always
    ports:
      - ${WRITEDB_PORT}:5432
    environment:
      POSTGRES_USER: ${WRITEDB_USER}
      POSTGRES_PASSWORD: ${WRTIEDB_PASSWORD}
      POSTGRES_DB: ${WRITEDB_DATABASE}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${WRITEDB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    volumes:
      - writedb_data:/var/lib/postgresql/data

  readdb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "${READDB_PORT}:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${READDB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${READDB_PASSWORD}
      - MONGO_INITDB_DATABASE=${READDB_DATABASE}
    volumes:
      - readdb_data:/data/db
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      retries: 3
      start_period: 10s
      timeout: 10s


  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "${RMQ_PORT}:5672"  # RabbitMQ
      - "${RMQ_MGMT_PORT}:15672"  # Management console
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - "rabbitmq_data:/var/lib/rabbitmq"
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  redis:
    image: redis:7.4.1
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - "redis_data:/usr/local/etc/redis"
      - "./redis.conf:/usr/local/etc/redis/redis.conf"
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  wsredis:
    image: redis:7.4.1
    container_name: wsredis
    ports:
      - "${WS_REDIS_PORT}:6379"
    volumes:
      - ./wsRedis.conf:/usr/local/etc/redis/wsRedis.conf:ro # 호스트의 wsRedis.conf를 컨테이너로 마운트
      - wsredis_data:/data  # Redis AOF 데이터 저장
    command: [ "redis-server", "/usr/local/etc/redis/wsRedis.conf" ]  # Redis 설정 파일을 사용하여 실행
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  elasticsearch:
    image: elasticsearch:8.17.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "${ES_PORT}:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - monitoring-network
  
  logstash:
    image: logstash:8.17.0
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    ports:
      - "${LS_PORT}:5044"
    depends_on:
      - elasticsearch
    networks:
      - monitoring-network
  
  kibana:
    image: kibana:8.16.2
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:${ES_PORT}
    ports:
      - "${KIB_PORT}:5601"
    depends_on:
      - elasticsearch
    networks:
      - monitoring-network

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prom.yaml:/etc/prometheus/prometheus.yml
      - prom_data:/prometheus
    ports:
      - "${PROM_PORT}:9090"
    networks:
      - monitoring-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "${GRAF_PORT}:3000"
    volumes:
      - graf_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - monitoring-network

  neo4j:
    image: neo4j:5.26.0
    ports:
      - "${NEO_CONSOLE_PORT}:7474"
      - "${NEO_DB_PORT}:7687"
    volumes:
      - neo_data:/data
    environment:
      NEO4J_AUTH: "${NEO_USER}/${NEO_PASSWORD}"
    
volumes:
  writedb_data:
  readdb_data:
  rabbitmq_data:
  redis_data:
  wsredis_data:
  es_data:
  prom_data:
  graf_data:
  neo_data:

networks:
  monitoring-network:
    driver: bridge
